深入浅出Redis
1.Redis的发展史
	Redis[Remote Directory Server]:远程服务器字典

2.下载安装Redis

	1》Linux下安装Redis
	http://redis.io/download

	wget http://download.redis.io/releases/redis-3.0.1.tar.gz 下载
	tar -xzvf redis-3.0.1.tar.gz 解压
	cd redis-3.0.1 进入解压目录
	make 编译 安装
	make install

	2》在bin下可执行的程序
	redis-server:Redis 服务器
	redis-cli:命令行客户端
	redis-benchmark:Redis的性能测试工具
	redis-check-aof:AOF文件修复工具
	redis-check-dump:RDB文件检测工具

	redis。config是Redis的配置文件
	将配置文件中的deamonize yes 以守卫进程的方式来使用

	3》启动和停止Redis

	直接启动
		redis-server
		redis-server /ect/redis.comfig

	停止Redis
		shutdown
		结束Redis的进程也可以
3.命令返回值

	1》状态回复
		ping
		SET test 'this is a test'
	2》错误的回复

		错误的回复以error开始
		(error)ERR unknow command 'TESTERROR'

	3》整数回复：
	以 interger 数值
	(integer) 2

	4》字符串回复

	GET test

	(nil)代表空的结果

	5》多行字符串回复

	KEY *,得到当前数据库中的存在的键名

4.Redis配置选项相关内容

	1》动态设置/获取配置选项的值

	获取：
	CONFIG GET name
	1)"port"
	2)"6379"

	设置：
	CONFIG SET name value

	2》Redis配置文件redis.config选项相关

	port 6379 默认端口

	bind 127.0.0.1, 默认绑定的主机地址

	timeout 0, 当客户端闲置多久之后关闭连接， 0代表没有启动这个选项

	loglevel notice, 日志的记录级别

	# debug: 很详细的信息，很适合开发和测试
	# verbose: 包含很多不太有用的信息
	# notice: 比较适合生产环境
	# warning: 警告信息

	logfile stdout, 日志的记录方式，默认为标准输出

	databases 16, 默认数据库的数量16个，默认的数据库编号从0开始

	--快照--

	save <second> <changes>:多少秒有多少次改变将其同步到磁盘中数据文件里
	save 900 1--900秒内有一个改变
	save 300 10--300秒内有10个改变
	save 60 1000--60秒内有1000个改变


	rdbcompression yes, 存储本地数据库时是否启用压缩，默认yes
	dbfilename dump.rdb，指定本地数据库文件名，默认为dump.rdb

	dir ./,指定本地数据库的存放目录，默认是当前目录

5.redis的数据库类型

String字符串类型

	一个键最多存储512MB
	1》SET：设置key对应的值为value

	语法: SET key value [EX seconds] [PX millisconds] [NX|XX]

	EX seconds: 设置键的key的过期时间 SET key value EX seconds -- SETEX
	PX milliseconds:以毫秒的形式设置过期时间 SET key value PX milliseconds -- PSETEX
	NX:只有键不存在的时候才可以设置成功 SET key NX -- SETNX
	XX:只有key已经存在的时候才可以设置

	SET test16 'this is a test16' EX 100
	SET test17 'this is a test17' PX 20000
	SET test18 'this is a test18' NX 
	SET test18 'this is a test1888' XX

	SET test19 'this is a test19' EX 100 NX

	SET test20 'this is a test20' EX 100 PX 300000 NX


	SET testStr1 'this is a test'

	注意：如果key存在，同名会产生覆盖

	2》GET：根据key找到对应的值

	语法：GET key

	GET testStr1

	注意：如果key不存在，返回nil
		如果key不是字符串，会报错

	3》GETRANGE:返回字符串中的一部分

	语法：GETRANGE key start end

	GETRANGE testStr2 0 4

	GETRANGE testStr2 0 -3

	GETRANGE testStr2 -4 -2

	GETRANGE testStr2 0 1000

	4》GETSET:设置指定key的值，并且返回旧的值

	语法：GETSET key value

	SET testStr3 'king'

	GET testStr3 

	GETSET testStr3 'queen'

	注意：当key不存在返回nil
		如果key不是字符串，会报错

	5》MSET

	语法：MSET key value [key value...]


	6》MGET：一次得到多个键值

	语法：MGET key key

	MGET testStr5 testStr6 testStr7

	MGET testStr5 testStr6 testStr7 testStr8

	7》STRLEN:获取key的字符串长度

	语法：STRLEN key

	STRLEN testStr5

	注意：对于不存在key获取其长度返回的0

	8》SETRANGE：相当于字符串替换的效果

	语法：SETRANGE key offset value

	注意：如果设置的key原来的字符串长度要比偏移量小，就会以零字节(\x00)来填充

	SET testStr9 'hello king'

	SETRANGE testStr9 6 'queen'

	对不存在的key使用SETRANGE

	EXISTS testStr10

	SETRANGE testStr10 5 'king'

	9》SEXNX:只有key不存在才能设置成功

	语法：SETNX key value 

	EXISTS testStr11

	SETNX testStr11 'maizi'

	GET testStr11

	SETNX testStr11 'maiziedu'

	GET testStr11

	10》SETEX:设置key并且设置其过期时间

	语法：SETEX key seconds value

	SET expireStr 60 'testExpire'

	注意：SETEX是原子性操作，相当于执行了SET key value ,又对这个key设置了过期时间EXPIRE key seconds

	SET expireStr1 'test1'

	EXPIRE expireStr1 10

	SETEX test12 1000 'a'

	GET test12

	11》MSETNX:设置多个key-value对，只有所有的key都不存在的时候才会成功

	语法：MSETNX key value [key value]

	MSETNX test13 'a' test14 'b' test15 'c'

	MSETNX test15 'aa' test16 'bb' test17 'cc'

	12》PSETEX:以毫秒为单位设置key的生存周期

	语法：PSETEX key milliseconds value

	PSETEX test16 2000 'hello world'

	PTTL

	13》INCR:对key中存储的数字+1

	语法：INCR key

	SET counter 1

	INCR counter 

	注意：key如果不存在，则会先初始化为0，在进行INCR操作

		如果key存储的不是数字，会报错

	INCR counter1

	INCR test20

	14》INCR BY : 将key中存储的数字加上指定增量

	语法：INCRBY key INCREMENT

	SET counter2 10

	INCRBY counter2 5

	INCRBY couter2 1.2

	15》INCRBYFLOAT:给key中存储的数字加上指定的浮点数

	语法：INCRBYFLOAT key increment

	SET counter3 1

	INCREBYFLOAT counter3 1.2

	16》DECR：将key中存储的数字减1

	语法：DECR key

	DECR counter3

	17》DECRBY key decrement

	DECRBY counter2 3

	18》APPEND:通过APPEND将值追加到字符串的末尾

	语法：APPEND key value

	注意：如果key不存在，则相当于执行的SET操作

	APPEND testStr11 'edu'

	APPEND noExistsStr 'this is a test'

Hash类型
	在配置文件中可以通过配置
	hash-max-ziplist-entries 512 512字节
	hash-max-ziplist-value 64 字段数目

	Hash相关命令

	1》HSET:将哈希表key中域field设置成指定的value

	语法: HSET key field value

	HSET userInfo1 username 'king'

	HSET userInfo1 password '123456'

	HSET userInfo1 email '382771946@qq.com'

	HGET userInfo1 username

	HSET userInfo1 username 'queen'

	如果哈希表key中的field不存在，相当于新建field，设置成功返回1

	如果哈希表key中field存在，相当于重新赋值，成功返回0

	2》HGET；返回哈希表key中给定的值

	语法：HGET key field

	HGET userInfo1 username

	注意：如果key中field不存在，返回的是nil

	3》HSETNX:将hash表中的field设置成指定的值，只要field不存在的时候才可以成功；如果field存在，操作无效

	语法：HSETNX key field value

	HSETNX testHash1 test 'a'

	4》HMSET:通过将多个field-value 设置到hash表key中

	语法：HMSET key field value ...

	HMSET userInfo2 username 'king' password '123' kickname 'smart king'

	HGET userInfo2 username

	HMSET userInfo2 username 'queen' role 'admin'

	5》HMGET:一次获得hash表key中多个field的值

	语法：HMGET key field field

	注意：如果hash表key中field不存在，会返回nil

	6》HGETALL: 返回hash表key中所有的field和value

	语法：HGETALL key

	HGETALL userInfo2

	7》HKEYS:返回hash中key的所欲field

	语法：HKEYS key

	HKEYS userInfo2

	8》HVALS:返回hash中key中field所有的对应的值

	语法: HVALS key

	HVALS userInfo2

	9》HEXISTS:检测hash中key的field是否存在

	语法：HEXISTS key field

	HEXISTS userInfo2 username

	HEXISTS userInfo2 notExists

	10》HLEN:返回hash表中field的数量

	语法：HLEN key

	HLEN userInfo2

	11》HINCRBY:给hash中key的field做增量操作

	语法：HINCRBY key field increment

	HSET userInfo3 age 12

	HINCRBY userInfo3 age 10

	HSET userInfo3 username 'king'

	HINCRBY userInfo3 username 10

	12》HINCRBYFLOAT:给hash中的key的field做增量浮点操作

	语法：HINCRBYFLOAT key field increment

	HSET userInfo3 salary '123.111'

	HINCRBYFLOAT userInfo3 salary 12.999999

	13》HDEL:删除hash中key的指定域，可以删除一个也可以删除多个

	语法：HDEL key field field

	HGETALL userInfo2

	HDEL userInfo2 username password email









List类型

Set集合类型

Zset有序集合类型




keys相关的命令：
1》 KEYS: 返回所有符合给定模式的key

语法：KEYS pattern

*: 匹配任意个字符

?:匹配一个任意字符

[]:匹配[]之间的一个字符，[b-e],a[b-e] ab ac ad ae

\x:匹配特殊字符\? \*

MSET one 1 two 2 three 3 four 4 five 5 six 6 seven 7

KEYS *

KEYS *O*

KEYS t??

KEYS ?O*

KEYS c[n-z]*

2》EXISTS:检测指定key是否存在

语法：EXISTS key

EXISTS one

3》TYPE:返回key所存储的类型

语法：TYPE key

不存在的key返回none
string
hash
set
zset
list

TYPE testStr11

TYPE userInfo2

4》 EXPIRE:设置key的过期时间

语法：EXPIRE key seconds

SET cache_page 'http://phpfamily.org'

EXPIRE cache_page 100

注意：如果key已经存在过期时间，在通过EXPIRE设置的时候会覆盖之前过期时间

5》EXPIREAT：需要指定在指定时间戳过期

语法：EXPIRE key timestamp

SET cache_page1:'1530888888'

6》EXPIRE:以毫秒的形式指定过期时间

语法：EXPIRE key milliseconds

SET cache_page2 'http://maiziedu.com'

PEXPIRE cache_page2 50000

7》PEXPIREAT:指定时间戳，单位为毫秒

语法：PEXPIREAT key timestamp

SET cache_page3 'http://phpfamily.ory'

PEXPIREAT cache_page3 '1530888888000000'

8》TTL：以秒为单位返回key剩余时间

语法：TTL key
注意：如果没有key没有设置过期时间，返回-1

如果key不存在返回-2

返回过期时间

SET cache_page4 'http://www.baidu.com'

TTL cache_page4

TTL cache_page5

EXPIRE cache_page4 100

9》PTTL：以毫秒为单位返回key剩余的时间

语法：PTTL key


10》PERIST:将一个带有过期时间的key转变为永久的key

语法：PERSIST key

SET cache 'testCache'

TTL cache

PERSIST cache

TTL cache

11》DEL:删除指定的KEY

语法：DEL key ...

DEL cache

12》RANDOMKEY:随机的从当前数据库中返回一个key

语法：RANDOMKEY

RANDOMKEY

13》RENAME :重命名一个键

语法：RENAME key newkey

SET testRename1 'rename1'

RENAME testRename1 testRename2

RENAME testRename2 testRename2

RENAME testRename2 test14

RENAME test14 six

注意：如果名称没有发生改变会报错

14》RENAMENX:必须重命名这个新名称不存在才会生效

语法：RENAEMNX key newkey

SET testRename 'test'

RENAMENX testRename six

15》DUMP：序列话给定的key，返回序列化之后的值

语法：DUMP key

SET testDump 'this is a test'

DUMP testDump

16》RESTORE :反序列化

语法：RESTORE key tt1 value

RESORE testDump1 0 "\x00\x0ethis is a test\x06\x00f\x97\x10\x8bo\xb5\x91\xf8"


RESTORE testDump3 5000 "\x00\x0ethis is a test\x06\x00f\x97\x10\x8bo\xb5\x91\xf8"

 17》MOVE:将当前数据库中的key移动到另外的数据库中

 语法：MOVE key dbId

 SELECT 0
 SET testMove 'aaaa'

 MOVE testMove1

 注意：当移动一个不存在的key会失败
 当目录数据库中存在同名key的时候移动会失败

 OBJECT 、 MIGRATE 、SCAN、 SORT


 List列表类型

 	1》LPUSH:向列表左端添加元素

 	语法：LPUSH key value value ....

 	LPUSH myList1 a b c

 	2》RPUSH：向来列表右端添加元素

 	语法： RPUSH key value ...

 	RPUSH myList1 test1 test2 test3

 	RPUSH myList1 test3 test4

 	3》LPUSHX:向列表头部添加元素，只有key存在才能添加

 	语法：LPUSHX key value

 	LPUSHX myList2 a

 	LPUSH myList2 a

 	LPUSHX myList2 b

 	4》RPUSHX: 向列表尾部添加元素，只有key存在才能添加

 	语法： RPUSHX key value

 	5》LPOP:将列表头部的元素弹出

 	语法：LPOP key

 	LPOP myList1

 	6》RPOP :弹出列表尾部的元素

 	语法：RPOP key

 	RPOP myList1

 	7》LLEN:得到列表的长度

 	语法：LLEN key

 	8》LRANGE:获取列表片段

 	语法：LRANGE key start stop

 	LRANGE myList1 0 -1

 	注意：

 	如果start下标比列表的最大下标end大，返回的空列表

 	如果stop比列表长度大，返回到列表的尾部


 	9》LREM:删除列表指定的值

 	count值有以下几种：

 	count>0:从列表的头开始，向尾部搜索，移除与value相等的元素，移除count个

 	count<=:从列表尾部向头搜索，移除与value相等的元素，移除count个

 	count=0,移除列表中所有与count相等的值

 	LPUSH myList2 a b c d e f g e b

 	LREM myList2 2 b

 	LREM myList2 -2 a

 	LREM myList2 0 e

 	10》LINDEX:获得指定索引元素的值

 	语法：LINDEX key index

 	11》LSET:设置指定索引元素的值

 	语法：LSET key index value

 	LSET myList2 0 king

 	12》LTRIM:只保留列表的片段

 	语法：LTRIM key start stop

 	LPUSH myList3 log11 log22 log33 log44 log55

 	LTRIM myList3 0 1

 	LTRIM myList4 a b c d e f g

 	LTRIM myList4 1 -1

 	LTRIM myList4 1 1000

 	LTRIM myList4 1000 2000 列表被清空

 	13》LINSERT:向列表插入元素

 	语法：LINSERT key BEFORE|AFTER pivot  value

 	LPUSH myList5 a b c d

 	LINSERT myList5 BEFORE 'b' 'king'

 	LINSERT myList5 BEFORE bb queen

 	LINSERT myList5 AFTER d queen

 	LINSERT myList6 AFTER d queen

 	14》RPOPLPUSH:将元素从一个列表转到另一个列表

 	语法：RPOPLPUSH source destination

 	LPUSH myList6 a b c

 	LPUSH myList7 x y z 

 	RPOPLPUSH myList6 myList7

 	LPUSH webLog log1 log2 log3 log4

 	RPOPLPUSH webLog webLog

 	RPOPLPUSH webLog1 webLog

 	15》BLPOP:BLPOP 是LPOP的阻塞版本

 	语法：BLPOP key [key...] timeout

 	LPUSH muList9 a b c

 	LPUSH myList10 d e f

 	BLPOP myList8 myList9 myList10 0

 	BLPOP myList 8 0


set集合类型：无序集合

1》SADD:向集合中添加元素

语法： SADD key member [,...]

SADD web maiziedu.com

SADD web phpfamily.org jd.com

SADD web phpfamily.org taobao.com

2》SISMBER key member

语法: SISMEMBER web maiziedu.com

4》SREM:删除集合中的一个或者多个成员

语法：SREM key member [member...]

SREM web jd.com

SREM web taobao.com phpfamily.org

5》SPOP:删除并返回集合中的随机元素

语法：SPOP key

SADD course php java iso android c c++ oc

SPOP course

6》SRANDMEMBER:随机返回集合中的元素

语法：SRANDMEMBER key count

注意：
count为正数，而且小于集合中的元素，返回的一个包含随机元素的集合数组：count数大于集合中元素的个数，这时候会返回整个集合

count为负数，返回一个数组，数组中的成员可能出现重复，数组的长度是count取绝对值

SRANDMENBER course

SRANDMEMBER course 2

SRANDMEMBER course 50

SRANDMEMBER course -2

7》SDIFF:返回集合见的差集

语法：SDIFF key key ...

SADD testSet1 a b c d e

SADD testSet2 b c d e f

SDIFF testSet1 testSet2

SDIFF testSet2 testSet1

SADD testSet3 x y z a

SDIFF testSet1 testSet2 testSet3

8》SINTER:返回集合间的交集

语法：SINTER key key ...

SINTER testSet1 testSet2

SINTER testSet1 testSet2 testSet3

SADD testSet3 b

9》SUNION:返回集合中并集操作

语法：SUNION key key ...

SUNION testSet1 testSet2

SUNION testSet1 testSet2 testSet3

10》SCARD:返回集合元素个数

语法：SCARD testSet2

11》SDIFFSTORE:将差集结果保存到指定集合中

语法：SDIFFSTORE destination key key ...

SDIFFSTORE diffSet testSet1 testSet2

SADD diffSet f

SDIFFSTORE diffSet testSet1 testSet2

SADD diffSet testSet1 testSet2

SADD diffSet f

SDIFFSTORE diffSet testSet2 testSet1

SDIFFSTORE diffSet testSet1 testSet2

SDIFFSTORE testSet1 testSet1 testSet2

12》SINTERSTORE:将交集的结果保存在指定集合中

语法：SINTERSTORE destination key key ...

13》SUNIONSTORE:将并集的结果保存在指定集合中

语法：SUNIONSTORE destination key key ...

14》SMOVE:将集合中的元素移动到另外一个集合中

语法：SMOVE source destination member

注意：原子操作

SMOVE testSet2 testSet1 f

SADD testSet2 f

SMOVE testSet2 testSet1 f


zset(sorted set)有序集合

1》ZADD:将元素及其分数添加到集合中

语法：ZADD key score member [score member]

ZADD PHPScore 100 king

ZADD PHPScore 98 queen 98 maizi 80 test 78 test1 85 test2

ZADD PHPScore 60 test2 67 test3 56 test4

2》ZSCORE:获得指定元素的分数

语法：ZSCORE PHPScore maizi

ZSCORE PHPScore 12.3 test5

3》ZRANGE:按照元素分数从小到大的顺序返回指定索引start到stop之间所有元素（包含两端）

语法：ZRANGE key start stop [WITHSCORES]

ZRANGE PHPScore 0 -1

ZRANGE PHPScore 0 -1 WITHSCORES

ZRANGE PHPScore 0 2 WITHSCORES

ZRANGE PHPScore 0 2000 WITHSCORES

ZRANGE PHPScore 1000 2000 WITHSCORES

ZADD PHPScore 60 test6 60 test7 60 test8 60 test9

注意：当两个元素的分数相同的时候，Redis在排序按照字典的顺序（0<9<A<Z<a<z),如果使用的是UTF-8的编码方式的中文同样按照字典顺序排序

4》ZREVRANGE: 和ZRANGE相反，按照分数从大到小的顺序

语法：ZREVRANGE key start stop [WITHSCORES]

ZREVRANGE PHPScore 0 -1 WITHSCORES

5》ZRANGEBYSCORE:获取指定分数范围内的元素，按照分数从小到大的顺序，返回的是分数在指定的min到max的元素

语法：ZRANGEBYSCORE key min max [SITHSCORES] [LIMIT offset count]

#获取分数80~90之间的所有元素

ZRANGEBYSCORE PHPScore 80 90

ZADD 81 test9 82 test10 83 test11 84 test12 84 test13 88 test14 89 test15

ZRANGEBYSCORE PHPScore 80 90 WITHSCORES

ZADD PHPScore 90 test16

ZRANGEBYSCORE PHPScore 80 (90 WITHSCORES

ZRANGEBYSCORE PHPScore (80 (90 WITHSCORES

注意：通过(代表不包括端点

ZRANGEBYSCORE PHPScore 90 +inf WITHSCORES

ZRANGEBYSCORE PHPScore 80 +inf WITHSCORES LIMIT 0 3

6》ZRANGEBYSCORE : 获得指定分数范围内的元素，按照元素的分数从大到小的顺序返回min和max之间的元素

语法：ZREVRANGEBY key max min [WITHSCORES] [LIMIT offset count]

ZRECRANGEBYSCORE PHPScore 90 80 WITHSCORES

7》ZINCYBY:操作某个元素的分数，返回操作之后的分数

语法： ZINCYBY key increment member

ZINCYBY PHPScore 5 test16

ZINCYBY PHPScore -15 test16

8》ZCARD:获得集合中元素的数量

语法：ZCARD key

ZCARD PHPScore 

9》ZCOUNT :获取指定分数内的元素的数量

语法：ZCOUNT key min max

ZCOUNT PHPScore 80 90

10》ZREM:删除一个或者多个元素，返回删除元素的个数

语法：ZREM key member ...

ZREM PHPScore test16

11》ZREMRANGEBYRANK: 按照排名删除元素，按照分数从小到大的顺序删除所指定的排名范围内的所有元素

语法：ZREMRANGEBYRANK key start stop

ZADD testRem 1 a 2 b 3 c 4 d 5 e 6 f 7 g 8 h

ZREMRANGEBYSCORE testRem1 3 7

13》ZRANK: 获得指定元素的排名，根据分数从小到大的顺序

语法：ZRANK key member

ZRANK PHPScore king

14》ZREVRANK:获得指定元素的排名，根据分数从大到小的顺序

语法：ZREVRANK key member

ZREVRANK PHPScore king

15》ZINTERSTORE: 计算有序集合的交集，并将结果保存起来

语法：ZINTERSTORE destination numkeys [WEIGHTS weight weight ...] [AGGEGATE SUM | SUM | MIN | MAX]

ZADD testStoreedSet1 1 a 2 b 3 c

ZADD testStoreedSet2 10 a 20 b 30 c

ZINTERSTORE resTestStored1 2 resTestStored1 testStoredSet2

ZINTERSTORE resTestStored2 2 testStoredSet2 testStoredSet2 AGGEGATE SUM

ZINTERSTORE resTestStored3 2 testStoredSet1 testStoredSet2 AGGEGATE MIN

ZINTERSTORE resTestStored4 2 testStoredSet1 testStoredSet2 AGGEGATE MAX

ZINTERSTORE resTestStored5 2 testStoredSet1 testStoredSet2 WEIGHTS 2 0.2

16》ZUNIONSTORE: 计算有序集合并集，将结果保存起来

语法：ZUNIONSTORE destination numkeys key key ... [WEIGHTS weight weight ....]

ZADD TESTUNIONSET1 1 a 2 b 3 c 

ZADD TESTUNIONSET2 4 d 5 e 6 f 7 a 

ZUNIONSTORE unRes1 2 TESTUNIONSET1 TESTUBIONSET2

ZUNIONSTORE unRes2 2 TESTUNIONSET1 TESTUBIONSET2 AGGREGATE SUM

ZUNIONSTORE unRes3 2 TESTUNIONSET1 TESTUBIONSET2 AGGREGATE MIN

ZUNIONSTORE unRes4 2 TESTUNIONSET1 TESTUBIONSET2 AGGREGATE MAX

ZUNIONSTORE unRes5 2 TESTUNIONSET1 TESTUBIONSET2 WEIGHTS 2 2


1.开启事务

MULTI:开启事务，事务块中的多条语句会按照顺序放入队列当中，最后由EXEC命令来执行

MULTI

INCR counter1
INCR counter2
INCR counter3
PING
GET counter1
EXEC

2.执行事务块的命令
EXEC: 执行事务块中的命令


3.监视一个或者多个key
WATCH: 监视一个或者多个key，如果在执行事务之前这个key，如果被其他命令改动，事务就被打断了。

UNWATCH:取消WATCH命令对所有key的监视。

4.取消事务

DISCARD

MULTI
SET testMulti 'this is a test'
INCR counter4
INCR counter5
DISCARD

5.事务中的错误处理

1》语法错误：像命令不存在，或者参数错误
MULTI
SET test hello
SET test1
ERRORCOMMAND

2》运行错误
MULTI
SET set2 1
SADD test2 2
SET test2 3
EXEC

三、连接相关

PING:  测试和服务器之间是否连接有效，如果服务器运行正常的话会得到PONG

ECHO: 打印一个特定信息

QUIT：请求服务器关闭与当前客户端的连接，EXIT

SHUTDOWN：关闭服务器和客户端

AUTH:指定Redis的身份验证，Redis配置文件中requirepass选项的值
CONFIG SET requirepass password
登录进来之后通过AUTH命令进行验证

连接的时候-a pwd

SELECT:选择数据库

四、生存时间

EXPIRE/EXPIREAT
PEXPIRE/PEXPIREAT
PERSIST
TTL
PTTL


SET session:test1 uid1
EXPIRE session:test1 900
TTL session:test1
SET session:test2 uid2
EXPIRE session:test2 30

注意：使用SET GETSET也会清楚过期时间
SET key hello
EXPIRE key 100
TTL key
SET key world
TTL key


五排序相关 

SORT key

SORT key DESC

对数值进行排序
LPUSH testSort1 12 33 -13 45 90
SORT testSort1 #升序
SORT testSort1 DESC #降序

对字母进行排序

LPUSH testSort2 a b c test1 test2 king queen zendStdio

SORT testSort2 ALPHA

2》使用LIMIT限制返回结果

LPUSH testSort3 a b c d e f g h i j k l m n 1 2 3 4 6 8 900 23

SORT testSort3 ALPHA LIMIT 0 5

SORT testSort3 ALPHA LIMIT 0 5 DESC

3》根据外部key的权重进行排序

LPUSH uid 1
SET user_name_1 admin
SET user_level_1 9999

LPUSH uid 2
SET user_name_2 king
SET user_level_2 800

LPUSH uid 3
SET user_name_3 queen
SET user_level_3 600

LPUSH uid 4
SET user_name_4 jack
SET user_level_4 300

LPUSH uid 5
SET user_name_5 jack
SET user_level_5 860


SORT uid
SORT uid BY user_level_*

4》根据排序结果取出相应键值

SORT uid GET user_name_*

SORT uid BY user_level_* GET user_name_* 

SORT uid GET user_name_* GET user_level_*

SORT uid GET # GET user_level_* GET user_name_*

HMSET user_info_1 username admin level 1000

HMSET user_info_2 username king level 999

HMSET user_info_3 username king1 level 77

HMSET user_info_4 username king2 level 90


SORT uid BY user_info_*->level

SORT uid GET user_info_*->username

SORT uid BY user_info_*->level GET # GET user_info_*->username

5》将排序结果保存起来

RPUSH testSort4 1 2 5 8 9 20

RPUSH testSort4 43 56 90 120

SORT testSort4 DESC STORE sortRes4

SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern]]

注意：
SORT命令的时间复杂度O(n+mlogm),n表示要排序的列表或者集合中的元素的个数，m表示要返回元素的个数
1》尽可能减少带排序中间的数量（使n尽可能小）
2》使用LIMIT参数限制获取元素的个数（使m尽可能小）
3》如果要排序的数据量比较大，尽可能通过STORE缓存结果



五.发布订阅模式
PUBLISH/SUBSCRIBE
1》发布订阅模式的原理
包含两个角色，一个实发布者，一个实订阅者
订阅者可以订阅一个或者多喝频道channel
发布者可以向指定频道发布信息
通过PUBLISH发布消息
PUBLISH channle message
PUBLISH channel1.1 'maiziedu'
通过SUBSCRIBE 命令订阅频道
SUBSCRIBE channel ...
注意： 发布出去消息是不会被持久化，只有客户端订阅这个频道之后才能收到发送消息

UNSUBSCRIBE 取消某个频道订阅，但是在Redis客户端中做了限制没有办法进行验证

UNSUBSCRIBE [channel]

PSUBSCRIBE 订阅指定的规则
UNPSUBSCRIBE


六.管道技术













